name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  # Quality Gates - Code Quality & Security
  quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones should be disabled for better relevancy of analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Run Prettier Check
        run: npx prettier --check .
        continue-on-error: false

      - name: TypeScript Check
        run: npm run type-check
        continue-on-error: false

      - name: Security Audit
        run: npm audit --audit-level=high
        continue-on-error: false

      - name: License Check
        run: npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD;ISC;Apache*;Unlicense'
        continue-on-error: true

  # Healthcare Compliance Checks
  healthcare-compliance:
    name: Healthcare Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: quality

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: HIPAA Compliance Check
        run: |
          echo "Running HIPAA compliance validation..."
          # Check for PHI exposure in code
          grep -r -i "social.*security\|ssn\|patient.*id\|medical.*record" src/ && exit 1 || echo "No PHI exposure detected"
          # Check for secure authentication patterns
          grep -r "password.*=\|token.*=\|secret.*=" src/ --include="*.ts" --include="*.tsx" --include="*.js" --include="*.jsx" && exit 1 || echo "No hardcoded secrets found"
        continue-on-error: false

      - name: FDA Validation Framework Check
        run: |
          echo "Validating FDA compliance patterns..."
          # Ensure clinical validation functions exist
          test -f "src/lib/clinical/validation.ts" || test -f "src/services/clinical-validation.ts" || echo "Clinical validation service required for FDA compliance"
          # Check for medical accuracy tracking
          grep -r "accuracy\|confidence\|validation" src/features/clinical/ || echo "Medical accuracy tracking required"
        continue-on-error: true

      - name: Data Protection Validation
        run: |
          echo "Checking data protection measures..."
          # Ensure encryption utilities exist
          grep -r "encrypt\|crypto\|hash" src/lib/ || echo "Encryption utilities should be implemented"
          # Check for audit logging
          grep -r "audit\|log" src/lib/ || echo "Audit logging should be implemented"
        continue-on-error: true

  # Unit & Integration Testing
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality

    strategy:
      matrix:
        test-type: [unit, integration, compliance]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Tests - ${{ matrix.test-type }}
        run: npm run test:${{ matrix.test-type }}
        env:
          NODE_ENV: test
        continue-on-error: false

      - name: Upload Coverage Reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Build Verification
  build:
    name: Build Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [quality, healthcare-compliance]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Build Application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Verify Build Output
        run: |
          test -d ".next" || exit 1
          echo "Build verification completed successfully"

      - name: Build Size Analysis
        run: |
          echo "Analyzing build size..."
          du -sh .next/
          # Warn if build size is too large (>100MB for healthcare app)
          SIZE=$(du -sm .next/ | cut -f1)
          if [ $SIZE -gt 100 ]; then
            echo "Warning: Build size ${SIZE}MB exceeds recommended 100MB for healthcare applications"
          fi

  # Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: quality

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Run Security Audit
        run: npm audit --audit-level=moderate

      - name: Dependency Vulnerability Scan
        run: |
          npx audit-ci --moderate
        continue-on-error: false

      - name: SAST Scanning with Semgrep
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/react
            p/typescript
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
        continue-on-error: true

  # Healthcare-Specific Validation
  medical-safety:
    name: Medical Safety Validation
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [test, build]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Medical Accuracy Framework Check
        run: |
          echo "Validating medical accuracy frameworks..."
          # Check for PHARMA framework implementation
          grep -r "PHARMA\|pharma" src/ --include="*.ts" --include="*.tsx" || echo "PHARMA framework not fully implemented"
          # Check for VERIFY protocol
          grep -r "VERIFY\|verify" src/ --include="*.ts" --include="*.tsx" || echo "VERIFY protocol not fully implemented"
          # Check for confidence scoring
          grep -r "confidence\|accuracy" src/ --include="*.ts" --include="*.tsx" || echo "Confidence scoring system required"

      - name: Clinical Validation Check
        run: |
          echo "Checking clinical validation systems..."
          # Ensure clinical validation components exist
          find src/features/clinical -name "*.tsx" -o -name "*.ts" | grep -i "validat\|safety\|clinical" || echo "Clinical validation components required"

      - name: Medical Data Protection Check
        run: |
          echo "Validating medical data protection..."
          # Check for PHI protection patterns
          grep -r "encrypt\|mask\|anonymize" src/ --include="*.ts" --include="*.tsx" || echo "PHI protection patterns recommended"

  # Final Status Check
  ci-success:
    name: CI Pipeline Success
    runs-on: ubuntu-latest
    needs: [quality, healthcare-compliance, test, build, security, medical-safety]
    if: success()

    steps:
      - name: CI Success Notification
        run: |
          echo "üéâ All CI checks passed successfully!"
          echo "‚úÖ Code Quality: PASSED"
          echo "‚úÖ Healthcare Compliance: VALIDATED"
          echo "‚úÖ Test Suite: PASSED"
          echo "‚úÖ Build: SUCCESSFUL"
          echo "‚úÖ Security: VALIDATED"
          echo "‚úÖ Medical Safety: VALIDATED"
          echo ""
          echo "Ready for deployment to healthcare environments! üè•"