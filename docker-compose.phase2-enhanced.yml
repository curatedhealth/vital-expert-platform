# VITAL Path - Cloud-Only Configuration
# Local Supabase services deprecated - using cloud instance
# Generated: 2025-10-08T20:05:32.300Z

# ===================================================================
# VITAL Path - Phase 2 Enhanced Complete System
# Docker Compose configuration with all Phase 2 Enhanced services
# ===================================================================

version: '3.8'

services:
  # ===================================================================
  # Frontend Layer - Next.js TypeScript Application
  # ===================================================================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_URL=ws://localhost:3001
      - NEXT_PUBLIC_SUPABASE_URL=${SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_ORCHESTRATOR_URL=http://enterprise-orchestrator:8001
      - NEXT_PUBLIC_AGENT_REGISTRY_URL=http://clinical-agent-registry:8003
      - NEXT_PUBLIC_PROMPT_LIBRARY_URL=http://clinical-prompt-library:8002
      - NEXT_PUBLIC_ADVISORY_BOARD_URL=http://advisory-board:8004
    depends_on:
      - node-gateway
      - enterprise-orchestrator
    networks:
      - vital-path-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================================================
  # Phase 2 Enhanced Python Services
  # ===================================================================

  # Enterprise Master Orchestrator - Event-driven orchestration
  enterprise-orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.orchestrator
    ports:
      - "8001:8001"
      - "9001:9090"  # Metrics port
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@# postgres: # DEPRECATED - Using cloud instance5432/${POSTGRES_DB}
      - MONGODB_URL=mongo# db: # DEPRECATED - Using cloud instance//mongo# db: # DEPRECATED - Using cloud instance27017
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - FHIR_BASE_URL=http://fhir-server:8080/fhir
      - OPENTELEMETRY_ENDPOINT=http://jaeger:14268
      - PROMETHEUS_ENDPOINT=http://prometheus:9090
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
      - mongodb
      - kafka
    networks:
      - vital-path-network
    restart: unless-stopped
    volumes:
      - ./logs/orchestrator:/app/logs
      - ./data/orchestrator:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Clinical Agent Registry - Medical specializations and routing
  clinical-agent-registry:
    build:
      context: .
      dockerfile: Dockerfile.clinical-agent-registry
    ports:
      - "8003:8003"
      - "9003:9090"  # Metrics port
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@# postgres: # DEPRECATED - Using cloud instance5432/${POSTGRES_DB}
      - LICENSE_VERIFICATION_API=${LICENSE_VERIFICATION_API}
      - BOARD_CERTIFICATION_API=${BOARD_CERTIFICATION_API}
      - DEA_VERIFICATION_API=${DEA_VERIFICATION_API}
      - NPI_VERIFICATION_API=${NPI_VERIFICATION_API}
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    networks:
      - vital-path-network
    restart: unless-stopped
    volumes:
      - ./logs/agent-registry:/app/logs
      - ./data/credentials:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Clinical Prompt Library - Medical compliance and validation
  clinical-prompt-library:
    build:
      context: .
      dockerfile: Dockerfile.clinical-prompt-library
    ports:
      - "8002:8002"
      - "9002:9090"  # Metrics port
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@# postgres: # DEPRECATED - Using cloud instance5432/${POSTGRES_DB}
      - HIPAA_COMPLIANCE_ENABLED=true
      - FDA_COMPLIANCE_ENABLED=true
      - GDPR_COMPLIANCE_ENABLED=true
      - MEDICAL_NLP_MODEL_PATH=/app/models/medical-nlp
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    networks:
      - vital-path-network
    restart: unless-stopped
    volumes:
      - ./logs/prompt-library:/app/logs
      - ./data/models:/app/models
      - ./data/templates:/app/templates
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Real-time Advisory Board - WebSocket collaborative decision making
  advisory-board:
    build:
      context: .
      dockerfile: Dockerfile.advisory-board
    ports:
      - "8004:8004"
      - "9004:9090"  # Metrics port
    environment:
      - ENVIRONMENT=production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - POSTGRES_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@# postgres: # DEPRECATED - Using cloud instance5432/${POSTGRES_DB}
      - WEBSOCKET_ENABLED=true
      - CONSENSUS_ALGORITHMS_ENABLED=true
      - SESSION_RECORDING_ENABLED=true
      - LOG_LEVEL=info
    depends_on:
      - postgres
      - redis
    networks:
      - vital-path-network
    restart: unless-stopped
    volumes:
      - ./logs/advisory-board:/app/logs
      - ./data/sessions:/app/sessions
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================================================
  # Infrastructure Services
  # ===================================================================

  # Node.js API Gateway
  node-gateway:
    build:
      context: ./backend/node-gateway
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
      - "9091:9090"  # Metrics port
    environment:
      - NODE_ENV=production
      - GATEWAY_PORT=3001
      - ORCHESTRATOR_SERVICE_URL=http://enterprise-orchestrator:8001
      - AGENT_REGISTRY_SERVICE_URL=http://clinical-agent-registry:8003
      - PROMPT_MANAGEMENT_SERVICE_URL=http://clinical-prompt-library:8002
      - ADVISORY_BOARD_SERVICE_URL=http://advisory-board:8004
      - REDIS_URL=redis://redis:6379
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGINS=http://localhost:3002,http://localhost:3000
    depends_on:
      - enterprise-orchestrator
      - clinical-agent-registry
      - clinical-prompt-library
      - advisory-board
      - redis
    networks:
      - vital-path-network
    restart: unless-stopped
    volumes:
      - ./logs/gateway:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database
  # postgres: # DEPRECATED - Using cloud instance
    image: # postgres: # DEPRECATED - Using cloud instance15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-vital_path}
      - POSTGRES_USER=${POSTGRES_USER:-vital_path}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/sql/init:/docker-entrypoint-initdb.d
      - ./database/sql/migrations:/migrations
    networks:
      - vital-path-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-vital_path} -d ${POSTGRES_DB:-vital_path}"]
      interval: 30s
      timeout: 5s
      retries: 5

  # Redis - Caching and Session Storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - vital-path-network
    restart: unless-stopped
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB - Event Store
  mongo# db: # DEPRECATED - Using cloud instance
    image: mongo:7.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USER:-vital_path}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}
      - MONGO_INITDB_DATABASE=vital_path_events
    volumes:
      - mongodb_data:/data/db
      - ./database/mongo/init:/docker-entrypoint-initdb.d
    networks:
      - vital-path-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD","mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Apache Kafka - Event Streaming
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - vital-path-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - vital-path-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================================================
  # Monitoring and Observability
  # ===================================================================

  # Prometheus - Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - vital-path-network
    restart: unless-stopped

  # Grafana - Metrics Visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - vital-path-network
    restart: unless-stopped

  # Jaeger - Distributed Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "14268:14268"
      - "16686:16686"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - vital-path-network
    restart: unless-stopped

  # Elasticsearch for logging
  elasticsearch:
    image: elasticsearch:8.11.0
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - vital-path-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kibana for log visualization
  kibana:
    image: kibana:8.11.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - vital-path-network
    restart: unless-stopped

  # ===================================================================
  # Load Balancer and Reverse Proxy
  # ===================================================================

  # Nginx - Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - frontend
      - node-gateway
      - enterprise-orchestrator
      - clinical-agent-registry
      - clinical-prompt-library
      - advisory-board
    networks:
      - vital-path-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ===================================================================
  # Background Services
  # ===================================================================

  # Background Task Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@# postgres: # DEPRECATED - Using cloud instance5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - WORKER_CONCURRENCY=4
      - QUEUE_NAME=vital_path_tasks
    volumes:
      - ./data:/app/data
      - ./logs/worker:/app/logs
    depends_on:
      - postgres
      - redis
    networks:
      - vital-path-network
    restart: unless-stopped
    deploy:
      replicas: 2

  # Log Shipper
  filebeat:
    image: elastic/filebeat:8.11.0
    user: root
    volumes:
      - ./monitoring/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - ./logs:/var/log/app:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    depends_on:
      - elasticsearch
    networks:
      - vital-path-network
    restart: unless-stopped

  # Vector Database Backup Service
  vector-backup:
    build:
      context: ./scripts/backup
      dockerfile: Dockerfile
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@# postgres: # DEPRECATED - Using cloud instance5432/${POSTGRES_DB}
      - BACKUP_SCHEDULE="0 2 * * *"  # Daily at 2 AM
      - BACKUP_RETENTION_DAYS=30
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET=${BACKUP_S3_BUCKET}
    volumes:
      - ./data/backups:/app/backups
    networks:
      - vital-path-network
    restart: unless-stopped

  # Health Check Service
  health-checker:
    build:
      context: .
      dockerfile: Dockerfile.health-checker
    environment:
      - CHECK_INTERVAL=60
      - SERVICES_TO_CHECK=enterprise-orchestrator,clinical-agent-registry,clinical-prompt-library,advisory-board
      - ALERT_WEBHOOK_URL=${HEALTH_ALERT_WEBHOOK_URL}
    depends_on:
      - enterprise-orchestrator
      - clinical-agent-registry
      - clinical-prompt-library
      - advisory-board
    networks:
      - vital-path-network
    restart: unless-stopped

# ===================================================================
# Volumes for persistent data
# ===================================================================
volumes:
  postgres_data:
    driver: local
  redis-data:
    driver: local
  mongodb_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch_data:
    driver: local

# ===================================================================
# Network configuration
# ===================================================================
networks:
  vital-path-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16