/**
 * Synthesis Composer Service
 * Generates consensus + dissent summaries from expert panel responses
 * Based on LangGraph Implementation Guide for Pharma
 */

import { AgentReply } from './persona-agent-runner';

export interface Synthesis {
  summaryMd: string;
  consensus: string;
  dissent: string;
  risks: Array<{
    risk: string;
    assumption: string;
    dataRequest?: string;
  }>;
  humanGateRequired: boolean;
}

export class SynthesisComposer {
  /**
   * Compose synthesis from expert replies
   */
  async compose(replies: AgentReply[], question: string): Promise<Synthesis> {
    // Build table of responses
    const table = this.buildResponseTable(replies);

    // Extract consensus points
    const consensus = this.extractConsensus(replies);

    // Extract disagreements
    const dissent = this.extractDissent(replies);

    // Collect risks and assumptions
    const risks = this.collectRisks(replies);

    // Generate executive summary
    const summaryMd = this.generateSummary(question, replies, consensus, dissent);

    // Determine if human gate is required
    const humanGateRequired = this.requiresHumanGate(replies, dissent);

    return {
      summaryMd,
      consensus,
      dissent,
      risks,
      humanGateRequired
    };
  }

  /**
   * Build markdown table of responses
   */
  private buildResponseTable(replies: AgentReply[]): string {
    const rows = replies.map(reply => {
      return `| ${reply.persona} | ${reply.answer.slice(0, 100)}... | ${reply.confidence.toFixed(2)} |`;
    });

    return `| Persona | Response | Confidence |\n|---------|----------|------------|\n${rows.join('\n')}`;
  }

  /**
   * Extract consensus points from replies
   */
  private extractConsensus(replies: AgentReply[]): string {
    // Simplified consensus detection
    // In production, would use semantic similarity
    const commonThemes: string[] = [];

    // For now, return placeholder
    return 'Panel consensus: Experts agree on the need for evidence-based approach with regulatory alignment and patient safety monitoring.';
  }

  /**
   * Extract key disagreements
   */
  private extractDissent(replies: AgentReply[]): string {
    // Check for low-confidence responses or flags
    const disagreements: string[] = [];

    replies.forEach(reply => {
      if (reply.confidence < 0.6) {
        disagreements.push(`${reply.persona} expresses uncertainty (confidence: ${reply.confidence})`);
      }
      if (reply.flags.includes('Data Ambiguity')) {
        disagreements.push(`${reply.persona} notes insufficient data`);
      }
    });

    if (disagreements.length === 0) {
      return 'No significant disagreements identified.';
    }

    return `Key disagreements:\n${disagreements.map((d, i) => `${i + 1}. ${d}`).join('\n')}`;
  }

  /**
   * Collect risks and assumptions from all replies
   */
  private collectRisks(replies: AgentReply[]): Array<{risk: string; assumption: string; dataRequest?: string}> {
    const risks: Array<{risk: string; assumption: string; dataRequest?: string}> = [];

    replies.forEach(reply => {
      // Extract from answer text (simplified)
      if (reply.answer.toLowerCase().includes('risk')) {
        risks.push({
          risk: `${reply.persona} identified risk`,
          assumption: 'Extracted from response',
          dataRequest: reply.flags.includes('Data Ambiguity') ? 'Additional evidence requested' : undefined
        });
      }
    });

    return risks;
  }

  /**
   * Generate executive summary in markdown
   */
  private generateSummary(
    question: string,
    replies: AgentReply[],
    consensus: string,
    dissent: string
  ): string {
    const takeaways = this.extractTakeaways(replies);

    return `## Executive Summary

**Question:** ${question}

### Key Takeaways
${takeaways.map((t, i) => `${i + 1}. ${t}`).join('\n')}

### Consensus
${consensus}

### Disagreements & Uncertainties
${dissent}

### Expert Panel Composition
- ${replies.map(r => `${r.persona} (confidence: ${r.confidence.toFixed(2)})`).join('\n- ')}

---
*Generated by VITAL Path Virtual Advisory Board*`;
  }

  /**
   * Extract 3-5 key takeaways
   */
  private extractTakeaways(replies: AgentReply[]): string[] {
    // Simplified - in production would use NLP
    return [
      'Evidence-based approach recommended with regulatory alignment',
      'Patient safety monitoring protocols essential',
      'Additional data may be required for conclusive recommendations'
    ];
  }

  /**
   * Determine if human review is required
   */
  private requiresHumanGate(replies: AgentReply[], dissent: string): boolean {
    // Require human gate if:
    // - Any reply has "Needs Human Review" flag
    // - Significant dissent (multiple disagreements)
    // - Low confidence across board

    const needsReview = replies.some(r => r.flags.includes('Needs Human Review'));
    const lowConfidence = replies.filter(r => r.confidence < 0.6).length > replies.length / 2;

    return needsReview || lowConfidence;
  }
}

// Singleton instance
export const synthesisComposer = new SynthesisComposer();
