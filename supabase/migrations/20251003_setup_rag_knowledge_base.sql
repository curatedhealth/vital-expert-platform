-- ============================================================================
-- RAG Knowledge Base Setup for Virtual Advisory Board
-- ============================================================================
-- Purpose: Enable pgvector and create knowledge base for tool calling
-- Created: 2025-10-03
-- ============================================================================

-- Enable pgvector extension for vector similarity search
CREATE EXTENSION IF NOT EXISTS vector;

-- ============================================================================
-- KNOWLEDGE BASE DOCUMENTS TABLE
-- ============================================================================

CREATE TABLE IF NOT EXISTS knowledge_base_documents (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  content TEXT NOT NULL,
  embedding vector(1536), -- OpenAI text-embedding-ada-002 dimensions
  metadata JSONB DEFAULT '{}'::jsonb,
  category TEXT,
  source TEXT,
  created_at TIMESTAMPTZ DEFAULT NOW(),
  updated_at TIMESTAMPTZ DEFAULT NOW()
);

-- ============================================================================
-- INDEXES
-- ============================================================================

-- Vector similarity search index (IVFFlat algorithm)
CREATE INDEX IF NOT EXISTS idx_kb_embedding ON knowledge_base_documents
USING ivfflat (embedding vector_cosine_ops)
WITH (lists = 100);

-- Category filtering index
CREATE INDEX IF NOT EXISTS idx_kb_category ON knowledge_base_documents(category);

-- Source filtering index
CREATE INDEX IF NOT EXISTS idx_kb_source ON knowledge_base_documents(source);

-- Full-text search index
CREATE INDEX IF NOT EXISTS idx_kb_content_fts ON knowledge_base_documents
USING gin(to_tsvector('english', content));

-- ============================================================================
-- VECTOR SIMILARITY SEARCH FUNCTION
-- ============================================================================

CREATE OR REPLACE FUNCTION match_documents(
  query_embedding vector(1536),
  match_count INT DEFAULT 3,
  filter_category TEXT DEFAULT NULL
)
RETURNS TABLE (
  id UUID,
  content TEXT,
  metadata JSONB,
  category TEXT,
  source TEXT,
  updated_at TIMESTAMPTZ,
  similarity FLOAT
)
LANGUAGE plpgsql
AS $$
BEGIN
  RETURN QUERY
  SELECT
    knowledge_base_documents.id,
    knowledge_base_documents.content,
    knowledge_base_documents.metadata,
    knowledge_base_documents.category,
    knowledge_base_documents.source,
    knowledge_base_documents.updated_at,
    1 - (knowledge_base_documents.embedding <=> query_embedding) as similarity
  FROM knowledge_base_documents
  WHERE
    CASE
      WHEN filter_category IS NOT NULL
      THEN knowledge_base_documents.category = filter_category
      ELSE TRUE
    END
    AND knowledge_base_documents.embedding IS NOT NULL
  ORDER BY knowledge_base_documents.embedding <=> query_embedding
  LIMIT match_count;
END;
$$;

-- ============================================================================
-- ROW LEVEL SECURITY (RLS)
-- ============================================================================

-- Enable RLS
ALTER TABLE knowledge_base_documents ENABLE ROW LEVEL SECURITY;

-- Policy: Allow service role full access
CREATE POLICY "Service role has full access to knowledge base"
  ON knowledge_base_documents
  FOR ALL
  TO service_role
  USING (true)
  WITH CHECK (true);

-- Policy: Authenticated users can read
CREATE POLICY "Authenticated users can read knowledge base"
  ON knowledge_base_documents
  FOR SELECT
  TO authenticated
  USING (true);

-- Policy: Authenticated users can insert (for document upload)
CREATE POLICY "Authenticated users can insert to knowledge base"
  ON knowledge_base_documents
  FOR INSERT
  TO authenticated
  WITH CHECK (true);

-- ============================================================================
-- HELPER FUNCTIONS
-- ============================================================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = NOW();
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Trigger to automatically update updated_at
CREATE TRIGGER update_knowledge_base_documents_updated_at
  BEFORE UPDATE ON knowledge_base_documents
  FOR EACH ROW
  EXECUTE FUNCTION update_updated_at_column();

-- ============================================================================
-- SEED SAMPLE DATA (for testing)
-- ============================================================================

-- Note: Embeddings will be generated by the application
-- This is just placeholder structure

COMMENT ON TABLE knowledge_base_documents IS 'RAG knowledge base for Virtual Advisory Board expert tool calling';
COMMENT ON COLUMN knowledge_base_documents.embedding IS 'OpenAI ada-002 embedding vector (1536 dimensions)';
COMMENT ON COLUMN knowledge_base_documents.category IS 'Document category: clinical, regulatory, commercial, manufacturing, safety, general';
COMMENT ON COLUMN knowledge_base_documents.metadata IS 'Additional metadata: source, trial_phase, indication, year, etc.';
COMMENT ON FUNCTION match_documents IS 'Vector similarity search function for RAG retrieval';
